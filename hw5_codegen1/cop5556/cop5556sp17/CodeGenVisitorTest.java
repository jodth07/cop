package cop5556sp17;

import java.io.FileOutputStream;
import java.io.OutputStream;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import cop5556sp17.AST.ASTNode;
import cop5556sp17.AST.Program;

public class CodeGenVisitorTest {

	static final boolean doPrint = true;

	static void show(Object s) {
		if (doPrint) {
			System.out.println(s);
		}
	}

	boolean devel = false;
	boolean grade = true;


	public void doTest(String progr, String[] arg) throws Exception {
		String input = progr;
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);

		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
		byte[] bytecode = (byte[]) program.visit(cv, null);

		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);

		//write byte code to file
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);

		// directly execute bytecode
		String[] args = arg; //create command line argument array to initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
	}

	public void doTest(String progr) throws Exception {
		String[] args = new String[0];
		doTest(progr, args);
	}

	String fileCarnival = "\\Users\\jodth07\\Documents\\workspace\\cop5556sp17\\bin\\carnival.gif";
	String fileLambo = "\\Users\\jodth07\\Documents\\workspace\\cop5556sp17\\bin\\Lambo.jpeg";
	String fileLove = "\\Users\\jodth07\\Documents\\workspace\\cop5556sp17\\bin\\love.jpg";
	String fileLadyx = "\\Users\\jodth07\\Documents\\workspace\\cop5556sp17\\bin\\ladyx.jpg";
	String fileBeach = "\\Users\\jodth07\\Documents\\workspace\\cop5556sp17\\bin\\beach.jpeg";

	String urlLelouch = "http://images2.itechpost.com/data/images/full/52948/code-geass-season-3-lelouch-of-the-resurrection.jpg";
	String urlPanther = "http://assets1.ignimgs.com/2016/09/02/blackpanther1280jpg-7587a8_1280w.jpg";
	String urlShield = "https://cdn3.twinfinite.net/wp-content/uploads/2016/07/6906605-agents-of-shield.jpg";
	String urlWine = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcReOrrAEyFFI74bz3FSKfSFip8TQeWiEQ2Zo-rXP07GkLalfx1E8Q";

	String boolTrue = "true";
	String boolFalse = "false";

	String ints1 = "2132";
	String ints0 = "2323";
	String ints2 = "2132";

	/**************************************  Program,  *************************************/

	@Test
	public void emptyProg0() throws Exception {
		doTest("emptyProg {}");
	}

	@Test
	public void emptyProg1() throws Exception {
		//scan, parse, and type check the program
		String progname = "emptyProg";
		String input = progname + "  file x, integer itx,  url ur, boolean b1 {}";
		String[] args = {fileCarnival, ints0, urlWine, boolTrue};
		doTest(input, args);
	}

	@Test
	public void emptyProg2() throws Exception {
		//scan, parse, and type check the program
		String progname = "emptyProg";
		String input = progname + "  file x, integer itx,  url ur, boolean b1 {frame x  image y boolean z integer w}";
		String[] args = {fileCarnival, ints0, urlWine, boolTrue};
		doTest(input, args);
	}

	@Test
	public void emptyParamDecs() throws Exception {
		//scan, parse, and type check the program
		String progname = "emptyProg";
		String input = progname + " boolean bool, integer y, file f, url u{}";

		String[] args = {"true", "90", "boy.img", "https://dpaste.de/g7BY"}; //create command line argument array to initialize params, none in this case
		doTest(input, args);
	}

	@Test
	public void Prog3() throws Exception {
		//scan, parse, and type check the program
		String progname = "emptyProg";
		String input = progname + " integer itx,  boolean b1  {integer ii1 boolean bi1 \n }";

		String[] args = {"97", "false"}; //create command line argument array to initialize params, none in this case
		doTest(input, args);
	}

	@Test
	public void ifstate() throws Exception {
		//scan, parse, and type check the program
		String progname = "emptyProg";
		String input = progname + " {boolean b0 integer i0 b0 <- true; \n i0 <- 123456; }";
		doTest(input);
	}
	@Test
	public void ifstatef() throws Exception {
		//scan, parse, and type check the program
		String progname = "emptyProg";
		String input = progname + " {boolean b0 integer i0 b0 <- false; \n i0 <- 123456; }";
		doTest(input);
	}

	@Test
	public void ifstateA() throws Exception {
		//scan, parse, and type check the program
		String progname = "emptyProg";
		String input = progname + " {boolean b0 integer i0 integer i1 integer i2 b0 <- false; \n i0 <- 123456; i1 <- 12345; i2 <- 1234;" +
				"i2 <- i0 + i1; }";
		doTest(input);
	}

	@Test
	public void ifstate0() throws Exception {
		//scan, parse, and type check the program
		String progname = "emptyProg";
		String input = progname + " {boolean b0 integer i0 b0 <- true; \n i0 <- 123456; if(b0){ }}";
		doTest(input);
	}

	@Test
	public void amAssintAdd() throws Exception {
		//scan, parse, and type check the program
		String progname = "emptyProg";
		String input = progname + " {integer int integer y " +
				"\n int <- 90;" +
				"\n y <- int + 980; }";
		String[] ints = {ints0};
		doTest(input, ints);
	}

	@Test
	public void amAssintAdd0() throws Exception {
		//scan, parse, and type check the program
		String progname = "emptyProg";
		String input = progname + " { integer z integer int integer y " +
				"\n int <- 90;" +
				"\n y <- 980;" +
				"\n z <- int + y; }";
		String[] ints = {ints0};
		doTest(input, ints);
	}

	/**************************************   Paramdecs *************************************/

	/***	Files	*****/
	@Test
	public void paramFile() throws Exception {
		//scan, parse, and type check the program
		String progname = "emptyProg";
		String input = progname + " file x {}";
		String[] args = {fileCarnival};
		doTest(input, args);
	}

	@Test
	public void paramFile0() throws Exception {
		//scan, parse, and type check the program
		String progname = "emptyProg";
		String input = progname + " file x, file y {}";
		String[] args = {fileCarnival, fileLadyx};
		doTest(input, args);
	}

	@Test
	public void paramFiles() throws Exception {
		//scan, parse, and type check the program
		String progname = "emptyProg";
		String input = progname + " file x, file y , file z {}";
		String[] args = {fileCarnival, fileLadyx, fileLambo, fileLove};
		doTest(input, args);
	}

	/***	Urls	*****/

	@Test
	public void paramUrl() throws Exception {
		//scan, parse, and type check the program
		String progname = "emptyProg";
		String input = progname + " url ur {}";

		String[] args = {urlLelouch}; //create command line argument array to initialize params, none in this case
		doTest(input, args);
	}

	@Test
	public void paramUrl0() throws Exception {
		//scan, parse, and type check the program
		String progname = "emptyProg";
		String input = progname + " url ur, url x {}";

		String[] args = {urlLelouch, urlPanther}; //create command line argument array to initialize params, none in this case
		doTest(input, args);
	}

	@Test
	public void paramUrls() throws Exception {
		//scan, parse, and type check the program
		String progname = "emptyProg";
		String input = progname + " url x, url y, url z{}";

		String[] args = {urlLelouch, urlPanther, urlShield, urlWine}; //create command line argument array to initialize params, none in this case
		doTest(input, args);
	}

	/***	Bools	*****/

	@Test
	public void emptyBool() throws Exception {
		//scan, parse, and type check the program
		String progname = "emptyProg";
		String input = progname + " boolean bool {}";

		String[] args = {boolTrue}; //create command line argument array to initialize params, none in this case
		doTest(input, args);
	}

	@Test
	public void Prog1Bool() throws Exception {
		//scan, parse, and type check the program
		String progname = "emptyProg";
		String input = progname + " boolean itx {}";

		String[] args = {"false"}; //create command line argument array to initialize params, none in this case
		doTest(input, args);
	}

	/***	Ints	*****/
	@Test
	public void paramInt() throws Exception {
		//scan, parse, and type check the program
		String progname = "emptyProg";
		String input = progname + " integer int {}";

		String[] args = {"23"}; //create command line argument array to initialize params, none in this case
		doTest(input, args);
	}

	@Test
	public void ProgInt() throws Exception {
		//scan, parse, and type check the program
		String progname = "emptyProg";
		String input = progname + " integer itx {}";

		String[] args = {"90"}; //create command line argument array to initialize params, none in this case
		doTest(input, args);
	}

	/***	Mixeds	*****/

	@Test
	public void emptyBoolError() throws Exception { //TODO ERROR, SHOULD NOT PARSE
		//scan, parse, and type check the program
		String progname = "emptyProg";
		String input = progname + " boolean bool {}";

		String[] args = {"890"}; //create command line argument array to initialize params, none in this case
		doTest(input, args);
	}

	@Test
	public void paramIntError() throws Exception { //SHOULD NOT PASS
		//scan, parse, and type check the program
		String progname = "emptyProg";
		String input = progname + " integer int {}";

		String[] args = {"890"}; //create command line argument array to initialize params, none in this case
		doTest(input, args);
	}

	@Test
	public void emptyBoolInt() throws Exception {
		//scan, parse, and type check the program
		String progname = "emptyProg";
		String input = progname + " boolean bool, integer y{}";
		String[] args = {"true", "90"}; //create command line argument array to initialize params, none in this case
		doTest(input, args);
	}

	@Test
	public void ProgIntBool() throws Exception {
		//scan, parse, and type check the program
		String progname = "emptyProg";
		String input = progname + " integer itx,  boolean b1 {}";

		String[] args = {"97", "false"}; //create command line argument array to initialize params, none in this case
		doTest(input, args);
	}

	/**************************************  block *************************************/

	@Test
	public void block0 () throws Exception {
		doTest("emptyProg { integer x }");
	}

	/**************************************  decs *************************************/

	@Test
	public void decInt () throws Exception {
		doTest("emptyProg { integer x }");
	}

	@Test
	public void decBool () throws Exception {
		doTest("emptyProg { boolean x }");
	}

	@Test
	public void decImage () throws Exception {
		doTest("emptyProg { image x }");
	}

	@Test
	public void decFrame () throws Exception {
		doTest("emptyProg { frame x }");
	}

	@Test
	public void decCombine () throws Exception {
		doTest("emptyProg { frame x  image y boolean z integer w }");
	}

	/**************************************  statements *************************************/

	@Test
	public void statAssBool () throws Exception {
		String progname = "emptyProg";
		String input = progname + " boolean bool { boolean x x <- false;}";

		String[] args = {boolFalse};
		doTest(input, args);
	}

	@Test
	public void testBinaryExpr102() throws Exception{
		doTest("p {integer x integer y integer z x <- 9; y <- 10;\nz <- x + y;}");
	} // Unexpected error happened in source code.

	@Test
	public void statAssBoolOr () throws Exception {
		String progname = "emptyProg";
		String input = progname + " boolean bool { boolean x x <- true | false;}";

		String[] args = {boolFalse};
		doTest(input, args);
	}
	@Test
	public void statAssBoollt () throws Exception {
		String progname = "emptyProg";
		String input = progname + " boolean bool { boolean x x <-  90 < 9;}";

		String[] args = {boolFalse};
		doTest(input, args);
	}
	@Test
	public void statAssBoolGt () throws Exception {
		String progname = "emptyProg";
		String input = progname + " boolean bool { boolean x x <-  90 > 9;}";

		String[] args = {boolFalse};
		doTest(input, args);
	}
	@Test
	public void statAssBoolGR () throws Exception {
		String progname = "emptyProg";
		String input = progname + " boolean bool { boolean x x <-  90 >= 9;}";

		String[] args = {boolFalse};
		doTest(input, args);
	}
	@Test
	public void statAssBoollE () throws Exception {
		String progname = "emptyProg";
		String input = progname + " boolean bool { boolean x x <-  90 <= 9;}";

		String[] args = {boolFalse};
		doTest(input, args);
	}
	@Test
	public void statAssBoollEQ () throws Exception {
		String progname = "emptyProg";
		String input = progname + " boolean bool { boolean x x <-  90 == 9;}";

		String[] args = {boolFalse};
		doTest(input, args);
	}
	@Test
	public void statAssBoolGtE () throws Exception {
		String progname = "emptyProg";
		String input = progname + " boolean bool { boolean x x <-  90 > 9;}";

		String[] args = {boolFalse};
		doTest(input, args);
	}

	@Test
	public void statInt0 () throws Exception {
		String progname = "emptyProg";
		String input = progname + " boolean bool { integer x x <- 890;}";

		String[] args = {boolFalse};
		doTest(input, args);
	}

	@Test
	public void statIntPlus () throws Exception {
		String progname = "emptyProg";
		String input = progname + " boolean bool { integer x x <- 890 + 90;}";

		String[] args = {boolFalse};
		doTest(input, args);
	}

	@Test
	public void statIntMinus () throws Exception {
		String progname = "emptyProg";
		String input = progname + " boolean bool { integer x x <- 890 + 90;}";

		String[] args = {boolFalse};
		doTest(input, args);
	}

	@Test
	public void statIntDiv () throws Exception {
		String progname = "emptyProg";
		String input = progname + " boolean bool { integer x x <- 890 + 90;}";

		String[] args = {boolFalse};
		doTest(input, args);
	}

	@Test
	public void statIntMod () throws Exception {
		String progname = "emptyProg";
		String input = progname + " boolean bool { integer x x <- 890 + 90;}";

		String[] args = {boolFalse};
		doTest(input, args);
	}

		@Test
	public void statInt () throws Exception {
		String progname = "emptyProg";
		String input = progname + " boolean bool { integer x x <- 890;}";

		String[] args = {boolFalse};
		doTest(input, args);
	}
	@Test
	public void statFrame () throws Exception {
		String progname = "emptyProg";
		String input = progname + " boolean bool { frame x frame y x <- y;}";

		String[] args = {boolFalse};
		doTest(input, args);
	}

	@Test
	public void statIntPlud () throws Exception {
		String progname = "emptyProg";
		String input = progname + " boolean bool { integer x integer y x <- 90; \n y <- x;}";

		String[] args = {boolFalse};
		doTest(input, args);
	}

	@Test
	public void statAss0 () throws Exception {
		String progname = "emptyProg";
		String input = progname + " boolean bool { boolean x x <- false;}";

		String[] args = {boolFalse};
		doTest(input, args);
	}

	/***************************************** Decs and shits ***********************************************/

	@Test
	public void emptyDecsInt() throws Exception {
		//scan, parse, and type check the program
		String progname = "emptyProg";
		String input = progname + " {integer i}";

		String[] args = new String[0]; //create command line argument array to initialize params, none in this case
		doTest(input, args);
	}


	@Test
	public void emptyDecsBool() throws Exception {
		//scan, parse, and type check the program
		String progname = "emptyProg";
		String input = progname + " {boolean b}";

		String[] args = new String[0]; //create command line argument array to initialize params, none in this case
		doTest(input, args);
	}


	@Test
	public void emptyDecsFrame() throws Exception {
		//scan, parse, and type check the program
		String progname = "emptyProg";
		String input = progname + " {frame f}";

		String[] args = new String[0]; //create command line argument array to initialize params, none in this case
		doTest(input, args);
	}

	@Test
	public void emptyDecsImage() throws Exception {
		//scan, parse, and type check the program
		String progname = "emptyProg";
		String input = progname + " {image im}";

		String[] args = new String[0]; //create command line argument array to initialize params, none in this case
		doTest(input, args);
	}

	@Test
	public void emptyDecsIntBool() throws Exception {
		//scan, parse, and type check the program
		String progname = "emptyProg";
		String input = progname + " {integer i boolean b}";

		String[] args = new String[0]; //create command line argument array to initialize params, none in this case
		doTest(input, args);
	}

	@Test
	public void emptyDecsFrameImage() throws Exception {
		//scan, parse, and type check the program
		String progname = "emptyProg";
		String input = progname + " {image im frame f}";

		String[] args = new String[0]; //create command line argument array to initialize params, none in this case
		doTest(input, args);
	}

	@Test
	public void decInts() throws Exception {
		//scan, parse, and type check the program
		String progname = "emptyProg";
		String input = progname + "  { integer x integer y \n integer z }";

		String[] args = new String[0]; //create command line argument array to initialize params, none in this case
		doTest(input, args);
	}

	@Test
	public void emptyDecs() throws Exception {
		//scan, parse, and type check the program
		String progname = "emptyProg";
		String input = progname + " {integer i boolean b image im frame f}";

		// directly execute bytecode
		String[] args = new String[0]; //create command line argument array to initialize params, none in this case
		doTest(input, args);
	}

	/***************************************** Expressions **********************************************/

	@Test
	public void decAssBool() throws Exception {
		//scan, parse, and type check the program
		String progname = "emptyProg";
		String input = progname + " {boolean x \nx <- true;}";
		doTest(input);
	}


	@Test
	public void decAssint() throws Exception {
		//scan, parse, and type check the program
		String progname = "emptyProg";
		String input = progname + " {integer x \nx <- 890;}";
		doTest(input);
	}

	@Test
	public void binaryExpMin() throws Exception {
		//scan, parse, and type check the program
		String progname = "emptyProg";
		String input = progname + " {integer x \nx <- 890 - 90;}";
		doTest(input);
	}

	@Test
	public void binaryExpMul() throws Exception {
		//scan, parse, and type check the program
		String progname = "emptyProg";
		String input = progname + " {integer x \nx <- 890 * 90;}";
		doTest(input);
	}

	@Test
	public void binaryExpDiv() throws Exception {
		//scan, parse, and type check the program
		String progname = "emptyProg";
		String input = progname + " {integer x \nx <- 890 / 90;}";
		doTest(input);
	}

	@Test
	public void binaryExpMod() throws Exception {
		//scan, parse, and type check the program
		String progname = "emptyProg";
		String input = progname + " {integer x \nx <- 890 % 90;}";
		doTest(input);
	}

	@Test
	public void binaryExpadd() throws Exception {
		//scan, parse, and type check the program
		String progname = "emptyProg";
		String input = progname + " {integer x \nx <- 890 + 90;}";
		doTest(input);
	}


//	@Test
//	public void paramAssBool() throws Exception {
//		//scan, parse, and type check the program
//		String progname = "emptyProg";
//		String input = progname + " boolean x{ boolean y y <- x;}";
//		String[] bools = {boolTrue, boolFalse};
//		doTest(input, bools);
//	}

//	@Test
//	public void statAssBool0 () throws Exception {
//		String progname = "emptyProg";
//		String input = progname + " boolean bool { boolean x x <- bool;}";
//
//		String[] args = {boolFalse};
//		doTest(input, args);
//	}

//	@Test
//	public void statAssInt0 () throws Exception {
//		String progname = "emptyProg";
//		String input = progname + " integer int { integer x x <- int;}";
//
//		String[] args = {ints0};
//		doTest(input, args);
//	}

	@Test
	public void statAssImage () throws Exception {
		String progname = "emptyProg";
		String input = progname + " file f { image i0 f -> i0;}";

		String[] args = {fileLove};
		doTest(input, args);
	}

	@Test
	public void statAssBoolgt () throws Exception {
		String progname = "emptyProg";
		String input = progname + " integer int { integer x x <- 10;}";

		String[] args = {ints0};
		doTest(input, args);
	}
	@Test
	public void statAssBoolgt0 () throws Exception {
		String progname = "emptyProg";
		String input = progname + " integer int { integer x x <- int;}";

		String[] args = {ints0};
		doTest(input, args);
	}

	@Test
	public void statAssBoolgt1 () throws Exception {
		String progname = "emptyProg";
		String input = progname + " integer int { integer x x <- 10; int <- x;}";

		String[] args = {ints0};
		doTest(input, args);
	}

	@Test
	public void statAssBoolEa () throws Exception {
		String progname = "emptyProg";
		String input = progname + " boolean bool { boolean x x <- bool;}";

		String[] args = {boolFalse};
		doTest(input, args);
	}




	@Test
	public void statAssBoolE () throws Exception {
		String progname = "emptyProg ";
		String input = progname + "integer int_foo, boolean bool_bar {\n" +
				"                   int_foo <- 42; \n" +
				"                   bool_bar <- false;\n" +
				"                   integer local_foo0  \n" +
				"                   local_foo0 <- 5; \n" +
				"                   boolean local_bool0 \n" +
				"                   local_bool0 <- true;}";

		String[] args = {boolFalse};
		doTest(input, args);
	}

	@Test
	public void statAssBoolE0 () throws Exception {
		String progname = "emptyProg ";
		String input = progname + "integer int_foo  {\n" +
				"                   int_foo <- 42;}";

		String[] args = {boolFalse};
		doTest(input, args);
	}






//	@Test
//	public void statImage () throws Exception {
//		String progname = "emptyProg";
//		String input = progname + " boolean bool { image x x <- 890;}";
//
//		String[] args = {boolFalse};
//		doTest(input, args);
//	}

	@Test
	public void statAssnot () throws Exception {
		String progname = "emptyProg";
		String input = progname + " boolean bool, boolean bool2 { boolean x x <- false; bool2 <- false;}";

		String[] args = {boolFalse, boolTrue};
		doTest(input, args);
	}

	@Test
	public void paramAssint() throws Exception {
		//scan, parse, and type check the program
		String progname = "emptyProg";
		String input = progname + " integer x {x <- 890;}";
		String[] ints = {ints0};
		doTest(input, ints);
	}

	@Test
	public void amAssint() throws Exception {
		//scan, parse, and type check the program
		String progname = "emptyProg";
		String input = progname + " integer x {integer y " +
				"\ny <- 890;" +
				"\n x <- y;" +
				"\n y <- x; }";
		String[] ints = {ints0};
		doTest(input, ints);
	}

	@Test
	public void amAssintAdd3() throws Exception {  //TODO CHECK ON INSTANCE OF PARAMDEC
		//scan, parse, and type check the program
		String progname = "emptyProg";
		String input = progname + " integer i0, integer i1 { integer y y <- i0 + i1;}";
		String[] ints = {ints0, ints1};
		doTest(input, ints);
	}

	@Test
	public void amAssintAdd1() throws Exception { // TODO WHY SYNTAX ERROR
		//scan, parse, and type check the program
		String progname = "emptyProg";
		String input = progname + "integer z {integer int integer y " +
				"\n int <- 90;" +
//				"\n y <- 980;" +
//				"\n z <- int; " +
				"\n y <- z;}";
		String[] ints = {ints0};
		doTest(input, ints);
	}

	@Test
	public void binAssBool() throws Exception {
		//scan, parse, and type check the program
		String progname = "emptyProg";
		String input = progname + " {boolean x boolean y boolean z\nx <- y == z;}";
		doTest(input);
	}

	/***************************************** Statements ***********************************************/
	@Test
	public void Prog4() throws Exception {
		//scan, parse, and type check the program
		String progname = "emptyProg";
		String input = progname + " integer itx,  boolean b1  {integer ii1 boolean bi1 \n while (b1){ \n }\n }";
		doTest(input);
	}

	@Test
	public void Prog5() throws Exception {
		//scan, parse, and type check the program
		String progname = "emptyProg";
		String input = progname + " integer itx,  boolean b1  {integer ii1 boolean bi1 \n while (b1){ \n" +
				"                   if(bi1)\n{ \n" +
				"                     } \n" +
				"                 }\n }";
		doTest(input);
	}

	@Test
	public void Prog6() throws Exception {
		//scan, parse, and type check the program
		String progname = "emptyProg";
		String input = progname + " integer itx,  boolean b1  {integer ii1 boolean bi1 \n while (b1){ \n" +
				"                   if(bi1)\n{ \n" +
				"                        sleep ii1 + itx * 3; \n" +
				"                     } \n" +
				"                 }\n }";

		String[] args = new String[0]; //create command line argument array to initialize params, none in this case
		doTest(input, args);
	}

	@Test
	public void Prog7() throws Exception {
		//scan, parse, and type check the program
		String progname = "emptyProg";
		String input = progname + " integer itx,  boolean b1  {integer ii1 boolean bi1 \n while (b1){ \n" +
				"                   if(bi1)\n{ \n" +
				"                        integer ii1 <- itx * 3; \n" +
				"                     } \n" +
				"                 }\n " +
				"ii1 <- 12345+54321;" +
				"}";

		String[] args = new String[0]; //create command line argument array to initialize params, none in this case
		doTest(input, args);
	}

	@Test
	public void testProg() throws Exception {
		//scan, parse, and type check the program
		String progname = "";
		String input =  "assignParamNLocal integer int_foo, boolean bool_bar {int_foo <- 42;" +
				"\n bool_bar <- false;integer local_foo0 " +
				"\n local_foo0 <- 5; boolean local_bool0 " +
				"\n local_bool0 <- true;}";
		String[] args = {ints0, boolFalse};
		doTest(input);
	} //  expected:<[42false5]true>

	/***************************************** Statements ***********************************************/

	@Test
	public void ifstate1() throws Exception {
		//scan, parse, and type check the program
		String progname = "emptyProg";
		String input = progname + " {boolean b0 integer i0 b0 <- true; \n i0 <- 123456; if(b0){ integer i9 i9 <- 90; }}";
		doTest(input);
	}


	@Test
	public void run0() throws Exception {
		//scan, parse, and type check the program
		String progname = "emptyProg";
		String input = "assignParamNLocal integer i {}";

		String[] args = {ints0};
		doTest(input, args);
	}

	@Test
	public void run01() throws Exception {
		//scan, parse, and type check the program
		String progname = "emptyProg";
		String input = "assignParamNLocal integer i {integer k}";

		String[] args = {ints0};
		doTest(input, args);
	}

	@Test
	public void run02() throws Exception {
		//scan, parse, and type check the program

		String input = "assignParamNLocal integer i {integer k i<-1;}";

		String[] args = {ints0};
		doTest(input, args);
	}

	@Test
	public void run1() throws Exception {
		//scan, parse, and type check the program
		String progname = "emptyProg";
		String input = "assignParamNLocal boolean b {}";

		String[] args = {boolFalse};
		doTest(input, args);
	}
	@Test
	public void run11() throws Exception {
		//scan, parse, and type check the program
		String progname = "emptyProg";
		String input = "assignParamNLocal boolean b {boolean z}";

		String[] args = {boolFalse};
		doTest(input, args);
	}


/**

 "assignParamNLocal boolean b {boolean z b<-true;}"
 "assignParamNLocal integer i {integer k i<-1; k<-2;}"
 "assignParamNLocal boolean b {boolean z b<-true; z<-false;}"

 */




}







